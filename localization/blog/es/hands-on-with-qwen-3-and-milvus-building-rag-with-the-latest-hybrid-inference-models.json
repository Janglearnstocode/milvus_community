{"codeList":["# Install required packages\npip install --upgrade pymilvus openai requests tqdm\n# Set up API key\nimport os\nos.environ[\"DASHSCOPE_API_KEY\"] = \"YOUR_DASHSCOPE_API_KEY\" # Get this from Alibaba Cloud DashScope\n","# Download and extract Milvus documentation\n!wget https://github.com/milvus-io/milvus-docs/releases/download/v2.4.6-preview/milvus_docs_2.4.x_en.zip\n!unzip -q milvus_docs_2.4.x_en.zip -d milvus_docs\n\n# Load and parse the markdown files\nfrom glob import glob\n\ntext_lines = []\nfor file_path in glob(\"milvus_docs/en/faq/*.md\", recursive=True):\n    with open(file_path, \"r\") as file:\n        file_text = file.read()\n        text_lines += file_text.split(\"# \")\n","# Set up OpenAI client to access Qwen 3\nfrom openai import OpenAI\n\nopenai_client = OpenAI(\n    base_url=\"https://dashscope.aliyuncs.com/compatible-mode/v1\",\n    api_key=os.getenv(\"DASHSCOPE_API_KEY\")\n)\n\n# Set up embedding model\nfrom pymilvus import model as milvus_model\nembedding_model = milvus_model.DefaultEmbeddingFunction()\n","test_embedding = embedding_model.encode_queries([\"This is a test\"])[0]\nembedding_dim = len(test_embedding)\nprint(embedding_dim)\nprint(test_embedding[:10])\n","768\n[-0.04836066 0.07163023 -0.01130064 -0.03789345 -0.03320649 -0.01318448\n -0.03041712 -0.02269499 -0.02317863 -0.00426028]\n","from pymilvus import MilvusClient\n\n# Initialize Milvus client (using local storage for simplicity)\nmilvus_client = MilvusClient(uri=\"./milvus_demo.db\")\ncollection_name = \"my_rag_collection\"\n\n# Create a fresh collection\nif milvus_client.has_collection(collection_name):\n    milvus_client.drop_collection(collection_name)\n\n# Create a new collection\ntest_embedding = embedding_model.encode_queries([\"This is a test\"])[0]\nembedding_dim = len(test_embedding)\nmilvus_client.create_collection(\n    collection_name=collection_name,\n    dimension=embedding_dim,\n    metric_type=\"IP\", # Inner product distance\n    consistency_level=\"Strong\", # Strong consistency level\n)\n","from tqdm import tqdm\n\ndata = []\ndoc_embeddings = embedding_model.encode_documents(text_lines)\n\nfor i, line in enumerate(tqdm(text_lines, desc=\"Creating embeddings\")):\n    data.append({\"id\": i, \"vector\": doc_embeddings[i], \"text\": line})\n\nmilvus_client.insert(collection_name=collection_name, data=data)\n","Creating embeddings: 100%|██████████████████████████████████████████████████| 72/72 [00:00<00:00, 381300.36it/s]\n{'insert_count': 72, 'ids': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], 'cost': 0}\n","question = \"How is data stored in milvus?\"\n","search_res = milvus_client.search(\n    collection_name=collection_name,\n    data=embedding_model.encode_queries([question]), # Convert the question to an embedding vector\n    limit=3, # Return top 3 results\n    search_params={\"metric_type\": \"IP\", \"params\": {}}, # Inner product distance\n    output_fields=[\"text\"], # Return the text field\n)\n","import json\nretrieved_lines_with_distances = [\n    (res[\"entity\"][\"text\"], res[\"distance\"]) for res in search_res[0]\n]\nprint(json.dumps(retrieved_lines_with_distances, indent=4))\n","[\n    [\n        \" Where does Milvus store data?\\n\\nMilvus deals with two types of data, inserted data and metadata. \\n\\nInserted data, including vector data, scalar data, and collection-specific schema, are stored in persistent storage as incremental log. Milvus supports multiple object storage backends, including [MinIO](https://min.io/), [AWS S3](https://aws.amazon.com/s3/?nc1=h_ls), [Google Cloud Storage](https://cloud.google.com/storage?hl=en#object-storage-for-companies-of-all-sizes) (GCS), [Azure Blob Storage](https://azure.microsoft.com/en-us/products/storage/blobs), [Alibaba Cloud OSS](https://www.alibabacloud.com/product/object-storage-service), and [Tencent Cloud Object Storage](https://www.tencentcloud.com/products/cos) (COS).\\n\\nMetadata are generated within Milvus. Each Milvus module has its own metadata that are stored in etcd.\\n\\n###\",\n        0.6572665572166443\n    ],\n    [\n        \"How does Milvus flush data?\\n\\nMilvus returns success when inserted data are loaded to the message queue. However, the data are not yet flushed to the disk. Then Milvus' data node writes the data in the message queue to persistent storage as incremental logs. If `flush()` is called, the data node is forced to write all data in the message queue to persistent storage immediately.\\n\\n###\",\n        0.6312146186828613\n    ],\n    [\n        \"How does Milvus handle vector data types and precision?\\n\\nMilvus supports Binary, Float32, Float16, and BFloat16 vector types.\\n\\n- Binary vectors: Store binary data as sequences of 0s and 1s, used in image processing and information retrieval.\\n- Float32 vectors: Default storage with a precision of about 7 decimal digits. Even Float64 values are stored with Float32 precision, leading to potential precision loss upon retrieval.\\n- Float16 and BFloat16 vectors: Offer reduced precision and memory usage. Float16 is suitable for applications with limited bandwidth and storage, while BFloat16 balances range and efficiency, commonly used in deep learning to reduce computational requirements without significantly impacting accuracy.\\n\\n###\",\n        0.6115777492523193\n    ]\n]\n","context = \"\\n\".join(\n    [line_with_distance[0] for line_with_distance in retrieved_lines_with_distances]\n)\n","SYSTEM_PROMPT = \"\"\"\nYou are an AI assistant. You are able to find answers to the questions from the contextual passage snippets provided.\n\"\"\"\n\nUSER_PROMPT = f\"\"\"\nUse the following pieces of information enclosed in <context> tags to provide an answer to the question enclosed in <question> tags.\n\n<context>\n{context}\n</context>\n\n<question>\n{question}\n</question>\n\"\"\"\n","completion = openai_client.chat.completions.create(\n    # Model list: https://help.aliyun.com/zh/model-studio/getting-started/models\n    model=\"qwen-plus-2025-04-28\",\n    messages=[\n        {\"role\": \"system\", \"content\": SYSTEM_PROMPT},\n        {\"role\": \"user\", \"content\": USER_PROMPT},\n    ],\n    # Control thinking process with enable_thinking parameter (default True for open-source, False for commercial)\n    extra_body={\"enable_thinking\": False},\n)\n\nprint(completion.choices[0].message.content)\n\n","In Milvus, data is stored in two main categories: **inserted data** and **metadata**.\n\n- **Inserted Data**: This includes vector data (like Binary, Float32, Float16, and BFloat16 types), scalar data, and collection-specific schema. These are stored in persistent storage as **incremental logs**. Milvus supports various object storage backends for this purpose, including:\n\n  - [MinIO](https://min.io/)\n  - [AWS S3](https://aws.amazon.com/s3/?nc1=h_ls)\n  - [Google Cloud Storage (GCS)](https://cloud.google.com/storage?hl=en#object-storage-for-companies-of-all-sizes)\n  - [Azure Blob Storage](https://azure.microsoft.com/en-us/products/storage/blobs)\n  - [Alibaba Cloud OSS](https://www.alibabacloud.com/product/object-storage-service)\n  - [Tencent Cloud Object Storage (COS)](https://www.tencentcloud.com/products/cos)\n\n- **Metadata**: Metadata generated within Milvus is stored separately. Each Milvus module maintains its own metadata, which is stored in [etcd](https://etcd.io/), a distributed key-value store.\nWhen data is inserted into Milvus, it is first loaded into a message queue. It is not immediately written to disk. A `flush()` operation ensures that all data in the queue is written to persistent storage immediately.\n","import os\nimport time\nfrom openai import OpenAI\n\nos.environ[\"DASHSCOPE_API_KEY\"] = \"sk-****************\"\nclient = OpenAI(\n   api_key=os.getenv(\"DASHSCOPE_API_KEY\"),\n   base_url=\"https://dashscope.aliyuncs.com/compatible-mode/v1\",\n)\n############################################\n# Think\n# Record the start time\nstart_time = time.time()\nstream = client.chat.completions.create(\n   # model lists：https://help.aliyun.com/zh/model-studio/getting-started/models\n   model=\"qwen3-235b-a22b\",\n   # model=\"qwen-plus-2025-04-28\",\n   messages=[\n       {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n       {\"role\": \"user\", \"content\": \"A and B depart from the same location. A leaves 2 hours earlier at 5 km/h. B follows at 15 km/h. When will B catch up?\"},\n   ],\n   # You can control the thinking mode through the enable_thinking parameter\n   extra_body={\"enable_thinking\": True},\n   stream=True,\n)\nanswer_content = \"\"\nfor chunk in stream:\n   delta = chunk.choices[0].delta\n   if delta.content is not None:\n       answer_content += delta.content\n      \nprint(answer_content)\n\n# Record the end time and calculate the total runtime\nend_time = time.time()\nprint(f\"\\n\\nTotal runtime：{end_time - start_time:.2f}seconds\")\n"],"headingContent":"","anchorList":[{"label":"¿Qué tiene de interesante Qwen 3?","href":"Whats-Exciting-About-Qwen-3","type":2,"isActive":false},{"label":"Qwen 3 ya es compatible con DeepSearcher","href":"Qwen-3-Now-Supported-in-DeepSearcher","type":2,"isActive":false},{"label":"Tutorial práctico: Creación de un sistema RAG con Qwen 3 y Milvus","href":"Hands-on-Tutorial-Building-a-RAG-System-with-Qwen-3-and-Milvus","type":2,"isActive":false},{"label":"Comparación de los modos de razonamiento y no razonamiento: Una prueba práctica","href":"Comparing-Reasoning-vs-Non-Reasoning-Modes-A-Practical-Test","type":2,"isActive":false},{"label":"Conclusión","href":"Conclusion","type":2,"isActive":false}]}