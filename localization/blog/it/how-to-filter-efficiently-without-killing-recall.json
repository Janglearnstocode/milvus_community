{"codeList":["vector_to_search = rng.random((1, DIM), np.float32)\nexpr = f\"10 <= {AGE} <= 25\"\nvalid_ids = [1, 12, 123, 1234]\n\ndef external_filter_func(hits: Hits):\n    return list(filter(lambda hit: hit.id in valid_ids, hits))\n\nsearch_iterator = milvus_client.search_iterator(\n    collection_name=collection_name,\n    data=vector_to_search,\n    batch_size=100,\n    anns_field=PICTURE,\n    filter=expr,\n    external_filter_func=external_filter_func,\n    output_fields=[USER_ID, AGE]\n)\n\nwhile True:\n    res = search_iterator.next()\n    if len(res) == 0:\n        search_iterator.close()\n        break\n    for i in range(len(res)):\n        print(res[i])\n"],"headingContent":"","anchorList":[{"label":"Ottimizzazione dell'indice grafico","href":"Graph-Index-Optimization","type":2,"isActive":false},{"label":"Indicizzazione consapevole dei metadati","href":"Metadata-Aware-Indexing","type":2,"isActive":false},{"label":"Filtraggio iterativo","href":"Iterative-Filtering","type":2,"isActive":false},{"label":"Filtraggio esterno","href":"External-Filtering","type":2,"isActive":false},{"label":"Indice automatico","href":"AutoIndex","type":2,"isActive":false},{"label":"Prestazioni con un budget di 1.000 dollari","href":"Performance-on-a-1000-Budget","type":2,"isActive":false},{"label":"Conclusione","href":"Conclusion","type":2,"isActive":false},{"label":"Riferimenti","href":"References","type":2,"isActive":false}]}